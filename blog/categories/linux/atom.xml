<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | TechToy]]></title>
  <link href="http://ensonmj.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ensonmj.github.com/"/>
  <updated>2012-06-02T21:44:11+08:00</updated>
  <id>http://ensonmj.github.com/</id>
  <author>
    <name><![CDATA[ensonmj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[转]Linux inode 介绍]]></title>
    <link href="http://ensonmj.github.com/blog/2012/06/02/zhuan-linux-inode-jie-shao/"/>
    <updated>2012-06-02T21:13:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/06/02/zhuan-linux-inode-jie-shao</id>
    <content type="html"><![CDATA[<p>本文转自<a href="http://www.cnblogs.com/itech/archive/2012/05/15/2502284.html">http://www.cnblogs.com/itech/archive/2012/05/15/2502284.html</a>，在原文基础上稍加排版，纯属收藏</p>

<p>一、inode是什么？</p>

<p>理解inode，要从文件储存说起。文件储存在硬盘上，硬盘的最小存储单位叫做"扇区"（Sector）。每个扇区储存512字节（相当于0.5KB）。</p>

<p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个"块"（block）。这种由多个扇区组成的"块"，是文件存取的最小单位。"块"的大小，最常见的是4KB，即连续八个 sector组成一个 block。</p>

<p>文件数据都储存在"块"中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为"索引节点"。</p>

<!--more-->


<p>
二、inode的内容</p>

<p>inode包含文件的元信息，具体来说有以下内容：</p>

<blockquote><p>文件的字节数<br/>
文件拥有者的User ID<br/>
文件的Group ID<br/>
文件的读、写、执行权限<br/>
文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。<br/>
链接数，即有多少文件名指向这个inode<br/>
文件数据block的位置</p></blockquote>

<p>可以用<code>stat</code>命令，查看某个文件的inode信息：</p>

<pre><code>$stat example.txt 
  File: ‘example.txt’
  Size: 5           Blocks: 8          IO Block: 4096   regular file
Device: 805h/2053d  Inode: 13771400    Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1000/ ensonmj)   Gid: (  100/   users)
Access: 2012-06-02 21:21:37.546284322 +0800
Modify: 2012-06-02 21:22:02.769617202 +0800
Change: 2012-06-02 21:22:02.769617202 +0800
 Birth: -
</code></pre>

<p>总之，除了<strong>文件名</strong>以外的所有文件信息，都存在inode之中。至于为什么没有文件名，下文会有详细解释。</p>

<p>三、inode的大小</p>

<p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。</p>

<p>每个inode节点的大小，一般是128B或256B。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128B，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。</p>

<p>查看每个硬盘分区的inode总数和已经使用的数量，可以使用<code>df</code>命令：</p>

<pre><code>$df -i
Filesystem       Inodes  IUsed    IFree IUse% Mounted on
rootfs          6250496 325389  5925107    6% /
/dev            1019935    624  1019311    1% /dev
run             1020674    464  1020210    1% /run
/dev/sda3       6250496 325389  5925107    6% /
shm             1020674      6  1020668    1% /dev/shm
/dev/sda5      14983168 116890 14866278    1% /home
</code></pre>

<p>查看每个inode节点的大小，可以用如下命令（这个命令在我本机执行失败）：</p>

<pre><code>sudo dumpe2fs -h /dev/sda | grep "Inode size"
</code></pre>

<p>由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。</p>

<p>四、inode号码</p>

<p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。</p>

<p>这里值得重复一遍，Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。</p>

<p>使用<code>ls -i</code>命令，可以看到文件名对应的inode号码：</p>

<pre><code>$ls -i example.txt 
13771400 example.txt
</code></pre>

<p>五、目录文件</p>

<p>Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。</p>

<p>目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。</p>

<p><code>ls</code>命令只列出目录文件中的所有文件名：</p>

<pre><code>ls
</code></pre>

<p>ls -i命令列出整个目录文件，即文件名和inode号码：</p>

<pre><code>ls -i
</code></pre>

<p>如果要查看文件的详细信息，就必须根据inode号码，访问inode节点，读取信息。ls -l命令列出文件的详细信息。</p>

<pre><code>ls -l
</code></pre>

<p>六、硬链接</p>

<p>一般情况下，文件名和inode号码是"一一对应"关系，每个inode号码对应一个文件名。但是，Unix/Linux系统允许，<strong>多个文件名指向同一个inode号码</strong>。这意味着，可以用不同的文件名访问同样的内容；<strong>对文件内容进行修改，会影响到所有文件名</strong>；但是，<strong>删除一个文件名，不影响另一个文件名的访问</strong>。这种情况就被称为"硬链接"（hard link）。</p>

<p><code>ln</code>命令可以创建硬链接：</p>

<pre><code>ln 源文件 目标文件
</code></pre>

<p>运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做"链接数"，记录指向该inode的文件名总数，这时就会增加1。反过来，删除一个文件名，就会使得inode节点中的"链接数"减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。</p>

<p>这里顺便说一下目录文件的"链接数"。创建目录时，默认会生成两个目录项："."和".."。前者的inode号码就是当前目录的inode号码，等同于当前目录的"硬链接"；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的"硬链接"。所以，任何一个目录的"硬链接"总数，总是等于2加上它的子目录总数（含隐藏目录）,这里的2是父目录对其的“硬链接”和当前目录下的".硬链接“。</p>

<p>七、软链接</p>

<p>除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的"软链接"（soft link）或者"符号链接（symbolic link）。</p>

<p>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错："No such file or directory"。这是软链接与硬链接最大的不同：<strong>文件A指向文件B的文件名，而不是文件B的inode号码</strong>，文件B的inode"链接数"不会因此发生变化。</p>

<p><code>ln -s</code>命令可以创建软链接。</p>

<pre><code>ln -s 源文文件或目录 目标文件或目录
</code></pre>

<p>八、inode的特殊作用</p>

<p>由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象：</p>

<ol>
<li>有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。</li>
<li>移动文件或重命名文件，只是改变文件名，不影响inode号码。</li>
<li>打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。</li>
</ol>


<p>第3点使得软件更新变得简单，<strong>可以在不关闭软件的情况下进行更新，不需要重启</strong>。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。</p>

<p>九 实际问题</p>

<p>在一台配置较低的Linux服务器（内存、硬盘比较小）的/data分区内创建文件时，系统提示磁盘空间不足，用<code>df -h</code>命令查看了一下磁盘使用情况，发现/data分区只使用了66%，还有12G的剩余空间，按理说不会出现这种问题。后来用<code>df -i</code>查看了一下/data分区的索引节点(inode)，发现已经用满(IUsed=100%)，导致系统无法创建新目录和文件。</p>

<p>查找原因：<br/>
/data/cache目录中存在数量非常多的小字节缓存文件，占用的block不多，但是占用了大量的inode。 <br/>
解决方案：<br/>
1、删除/data/cache目录中的部分文件，释放出/data分区的一部分inode。<br/>
2、用软连接将空闲分区/opt中的newcache目录连接到/data/cache，使用/opt分区的inode来缓解/data分区inode不足的问题：</p>

<pre><code>ln -s /opt/newcache /data/cache 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch HDMI声音输出（续）]]></title>
    <link href="http://ensonmj.github.com/blog/2012/05/14/arch-hdmisheng-yin-shu-chu-%28xu-%29/"/>
    <updated>2012-05-14T20:42:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/05/14/arch-hdmisheng-yin-shu-chu-(xu-)</id>
    <content type="html"><![CDATA[<p>上一篇说到PulseAudio由于一个bug导致HDMI默认创建的设备不对，无法输出声音。最新的PulseAudio 2.0修复了此bug，现在可以不用做任何特殊配置就可以使用HDMI设备了。</p>

<p>另外说一句，Octopress好像不支持原文修改更新，只好再写了这篇短文，算是对上一篇的更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch HDMI 声音输出]]></title>
    <link href="http://ensonmj.github.com/blog/2012/05/04/arch-hdmi-sheng-yin-shu-chu/"/>
    <updated>2012-05-04T22:36:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/05/04/arch-hdmi-sheng-yin-shu-chu</id>
    <content type="html"><![CDATA[<p>最近又开始习惯性折腾了，这次折腾的对象是HDMI的音频输出。自从上次显卡的DVI接口导致电脑自动重启之后就开始使用HDMI接口连接显示器了。HDMI是可以同时传输视频和音频信号的，正好我的显示器也自带扬声器，可以充分利用起来。但理想很丰满，现实却很骨感，测试无法输出声音。</p>

<!--more-->


<p>按照Arch Wiki上有关<a href="https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture">ALSA</a>和<a href="https://wiki.archlinux.org/index.php/PulseAudio">PulseAudio</a>的说明跑了一遍，电脑上现有的声音输出设备如下：</p>

<pre><code>$aplay -l
**** List of PLAYBACK Hardware Devices ****　
card 0: NVidia [HDA NVidia], device 3: HDMI 0 &gt; [HDMI 0]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 0: NVidia [HDA NVidia], device 7: HDMI 0 &gt; [HDMI 0]
  Subdevices: 0/1
  Subdevice #0: subdevice #0
card 0: NVidia [HDA NVidia], device 8: HDMI 0 &gt; [HDMI 0]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 0: NVidia [HDA NVidia], device 9: HDMI 0 &gt; [HDMI 0]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 1: PCH [HDA Intel PCH], device 0: ALC889 &gt; Analog [ALC889 Analog]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
card 1: PCH [HDA Intel PCH], device 1: ALC889 &gt; Digital [ALC889 Digital]
  Subdevices: 1/1
  Subdevice #0: subdevice #0
</code></pre>

<p>然后测试哪个能输出声音，我的显卡是card 0,device 7能真正的输出声音。</p>

<pre><code>$aplay -D plughw:0,7 /usr/share/sounds/alsa/Noise.wav 
Playing WAVE '/usr/share/sounds/alsa/Noise.wav' : Signed 16 bit Little Endian, Rate 48000 Hz, Mono
</code></pre>

<p>到这儿说明硬件都没有问题，但为什么默认不能使用呢？后来搜索到问题的原因：PulseAudio默认只会创建一个HDMI的输出设备,具体到我的电脑对应于card 0,device 3,所以无法听到声音。最终的解决办法是编辑<code>/etc/pulse/default.pa</code>文件，找到相应的加载模块的地方，添加一行：</p>

<pre><code>load-module module-alsa-sink device=hw:0,7
</code></pre>

<p>OK,大喇叭开始广播啦</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]linux-编辑器-vi-emacs-grep-gawk-sed等]]></title>
    <link href="http://ensonmj.github.com/blog/2012/02/07/linux_editor/"/>
    <updated>2012-02-07T20:00:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/02/07/linux_editor</id>
    <content type="html"><![CDATA[<p>
    <span style="color:#6666CC"><strong><span style="font-size:18px">第１章：vi(vim) －visual editor (improve)</span></strong></span></p>


<p>
    <span style="font-size:16px"><strong>启动vi（vim）</strong></span><br />
    vi/vim filename：从filename第一行开始编辑，即光标默认停留在文件第一行第一个字符处；<br />
    +n filename：从第n行开始编辑；<br />
    + filename：从最后一行开始编辑；<br />
    +/pattern filename：从第一个包含字符串&ldquo;pattern&rdquo;的行开始编辑。<br />
    -r filename：在系统崩溃后恢复filename；<br />
    -R filename：以只读方式编辑filename，等同于命令view filename。</p>


<p>
    vi的三种工作模式：命令模式（也称普通模式)、插入模式与末行模式（命令模式下输入:后进入）。</p>


<!--more-->


<p>
    <span style="font-size:16px"><strong>命令模式下的命令</strong></span>：</p>


<p>
    i：在当前光标插入文本；<br />
    I：在所在行行首插入文本；<br />
    a：在当前光标后添加文本；<br />
    A：在当前行尾添加文本；</p>


<p>
    k、方向键上：光标上移；<br />
    j、方向键下：光标下移；<br />
    -：光标到上一行的行首；<br />
    +：光标到下一行的行首；<br />
    h、Backspace、方向键左：光标左移；<br />
    l、Space、方向键右：光标右移；<br />
    0、^：光标到行首；<br />
    $：光标到行尾；<br />
    w：光标移到下一单词，标点符号视为单独一个单词；<br />
    Ｗ：与w相似，标点符号视为单词的一部分，以空格为分隔；<br />
    b：光标移到上一个单词；<br />
    B：与b相似，只以空格为间隔，无视标点符号；<br />
    e：光标移到当前单词末；<br />
    E：与e相似，无视标点符号；<br />
    (：光标移到上一个句子的开始；<br />
    )：光标移到下一个句子的开始；<br />
    {：光标移到上一段落的开始；<br />
    }：光标移到下一段落的开始；<br />
    H：光标移到屏幕顶部第一行的最左端；<br />
    M：光标移到屏幕中间；<br />
    L：光标移到屏幕的尾部。</p>


<p>
    x、dl：删除当前字符；<br />
    X：删除当前光标左侧字符；<br />
    d0：从行的开始处删除；<br />
    D、d$：删除到行的末尾；<br />
    d^：从行开始的第1个字符开始删除（不包括空格和TAB）；<br />
    dw：删除到单词的末尾；<br />
    d5w：删除到第5个单词的末尾；<br />
    dtc：删除到当前行字符c的下一次出现；<br />
    dfc：删除到当前行字符c的下一次出现（包括c）；<br />
    d/word：删除到单词word的下一次出现；<br />
    d3{：从前面的第3段删除到当前位置；<br />
    d{：从本段的开始位置删除到当前位置；<br />
    db：从单词的开始处删除；<br />
    dW：删除到以空白为分隔的单词的末尾；<br />
    dB：从以空白为分隔的单词的首字符开始删除；<br />
    d5B：从以空白为分隔的前面第5个单词的首字符开始删除；<br />
    d)：删除到句子的末尾；<br />
    d4)：删除到第4个句子的末尾；<br />
    d}：删除到段落末尾；<br />
    d4}：删除到后面的第4段末尾；<br />
    dd：删除一行；<br />
    3dd：删除当前行开始的3行；<br />
    dL：删除到当前屏幕的最后一行（包括最后一行）；<br />
    dH：从当前屏幕的第一行开始删除。</p>


<p>
    C：删除到行的末尾，并进入插入模式。<br />
    cxx：删除指定的内容并进入插入模式。xx后缀与d命令的后缀相同。</p>


<p>
    ~：更改大小写；<br />
    3~：从当前字符开始更改3个字符的大小写；</p>


<p>
    s：用一个或多个字符替换当前光标位置处的字符；<br />
    S：用一个或多个字符替换当前行；<br />
    10s：用一个或多个字符替换当前字符开始的10个字符；</p>


<p>
    J：把当前行的末尾与下一行连接起来并以一个空格分隔，如果当前行以句点&ldquo;.&rdquo;结尾，则两行之间插入两个空格；</p>


<p>
    .：句点命令，重复执行最近一次的修改命令。</p>


<p>
    u：撤销上一次的编辑操作；<br />
    U：撤销对当前行的所有修改，将文本恢复到启动修改之前的状态<br />
    Ctrl+R：重复命令，即redo。</p>


<p>
    f：从当前光标开始查找指定的字符，并将光标移动到该字符出现的位置，可以d、c合用；<br />
    3fq：光标移到本行第三个字符q所在位置；<br />
    F：从本行开始位置到当前光标所在位置之间查找字符。</p>


<p>
    行号+G：定位到指定的行，若不指定行号，则默认定位到最后一行。</p>


<p>
    y：复制到通用缓冲区，与移动命令合用，如y2l，与d、c后缀相同。yy复制一行，3yy复制3行；<br />
    Y：等同于yy。</p>


<p>
    p：把通用缓冲区的内容粘贴到当前位置，删除命令或复制命令都会把文本存入通用缓冲区中；<br />
    P：把通用缓冲区的内容粘贴到当前字符之前。</p>


<p>
    Ctrl＋G：显示文件状态。</p>


<p>
    ZZ：保存并退出。</p>


<p>
    /＋字符串：查找字符串；<br />
    n：向后重复上一次搜索；<br />
    N：向前重复上次搜索。</p>


<p>
    Ctrl+w+s：水平拆分窗口；<br />
    Ctrl+w+n：打开新窗口编辑一个空文件；<br />
    Ctrl+w+w：实现在多个窗口之间的切换。</p>


<p>
    Ctrl+L：重绘屏幕。</p>


<p>
    Ctrl+y：向上滚一行；<br />
    Ctrl+e：向下滚一行；<br />
    Ctrl+u：向上滚动半屏；<br />
    Ctrl+d：向下滚动半屏；<br />
    Ctrl+b：向上滚动整屏；<br />
    Ctrl+f：向下滚动整屏。</p>


<p>
    <span style="font-size:16px"><strong>末行模式下的命令</strong></span></p>


<p>
    : [address] r [filename]：把文件内容插入到当前缓冲区，address可以是行号，未指定行号时默认插入到当前光标所在行的下方，未指定文件名时默认再次读入当前文件；<br />
    : [address] w [filename]：把缓冲区的部分或全部内容写入到磁盘，例：:3,8 w temp把3～8行的内容写加到temp文件里。:4,10 w &gt;&gt; temp把4～10行内容追加到temp文件里；</p>


<p>
    :f：显示文件状态，等同于命令模式下的Ctrl+G。</p>


<p>
    :undo：撤消命令，等同于命令模式下的u；<br />
    :redo：重复命令，等同于命令模式下的Ctrl+R。</p>


<p>
    :w：保存缓冲区的内容，但不退出；<br />
    :w filename：另存为；<br />
    :q：退出；<br />
    :wq：保存并退出；<br />
    :q!：不保存而退出。</p>


<p>
    :set noincsearch：设置普通查找，当输入/+字符串并按回车键开始查找；<br />
    :set incsearch：设置增量查找，每输入一个字符vi便高亮显示匹配的位置。</p>


<p>
    :[g] [address] s/search/replacement [/option]：替换字符串。g表示对所有匹配结果进行替换，否则只对第一次查找结果进行替换。address表示查找的范围，不指定则只搜索当前行。</p>


<p>
    :split：窗口水平拆分，可以多次拆分；<br />
    :split filename：水平拆分窗口，并在新窗口中载入指定文件；<br />
    :vsplit：窗口垂直拆分；<br />
    :vsplit filename：垂直拆分窗口，并载入指定文件。<br />
    :only：关闭除当前窗口之外的窗口；<br />
    :q：关闭当前窗口；<br />
    :qall：关闭所有窗口。</p>


<p>
    :sh：启动一个Shell，在该Shell里输入exit或Ctrl+d退出Shell回到vi；<br />
    :!command：执行外部命令。</p>


<p>
    :&#39;标记：字符&ldquo;&#39;&rdquo;，标记当前行，例：:&#39;t把该行标记成t；（博主用该命令时得到错误&ldquo;E20 没有设定标记&rdquo;。）<br />
    :`标记：字符&ldquo;`&rdquo;，使用标记，例如标记t存在时，命令:d&#39;t删除该行。</p>


<p>
    :help：获得帮助。</p>


<p>
    <span style="color:#6666CC"><strong><span style="font-size:18px">第２章：emacs －editing macros，宏编辑器</span></strong></span></p>


<p>
    emacs是一个屏幕编辑器，与vim相比，vim更适合于完成小型任务，如邮件的快速回复、系统配置的简单修改等，而emacs更适合于处理复杂 事务，如同时修改多个文件、调用其他程序等。与vim不同，emacs不需要在插入模式和命令模式间进行切换，所以emacs被称为无模式编辑器。 emacs与vim最大的区别是emacs允许用户使用Lisp编写新命令或者原来的命令。</p>


<p>
    在图形环境中，输入emacs命令进入图形界面。在命令行环境中，或输入命令emacs -nw -q filename进入文本模式。-nw表示不使用X接口，-q表示不从用户的主目录下读取&ldquo;~/.emacs&rdquo;或&ldquo;default.el&rdquo;初始化文件，而 使用标准的、未定制的emacs。不带参数的emacs进入帮助界面。</p>


<p>
    窗口底部反白显示的文本条，被称为模式行（mode line）。模式行显示的信息包括：文件修改指示符、当前文件名称、模式说明、当前光标位置指示符、缓冲区位置。<br />
    文件修改指示符是靠近最左边的两个星号字符。星号表示文件被修改，否则不显示星号而显示连字符。<br />
    缓冲区位置给出了当前窗口距离缓冲区底部的距离。可为&ldquo;All&rdquo;、&ldquo;Top&rdquo;、&ldquo;Bot&rdquo;或百分比。</p>


<p>
    屏幕的底部有一个单独的行，被称为回显区（echo area）或小缓冲区（mini buffer），也称状态行，用来显示较短的消息或特殊的单行命令。</p>


<p>
    Ctrl+X Ctrl+C：退出。<br />
    Ctrl+X Ctrl+s：保存文件。</p>


<p>
    Ctrl+F、右方向键：光标向前；<br />
    Ctrl+B、左方向键：光标向后；<br />
    Alt+f：光标向前移动一个字；<br />
    Alt+b：光标向后移动一个字；<br />
    Ctrl+A：光标移到行首；<br />
    Ctrl+E：光标移到行尾；<br />
    Ctrl+P、上方向键：光标上移一行；<br />
    Ctrl+N、下方向键：光标下移一行；<br />
    Alt+a：光标移到句子的开始处；<br />
    Alt+e：光标移到句子的末尾；<br />
    Alt+{：光标移到段落开始处；<br />
    Alt+}：光标移到段落末尾；<br />
    Alt+r：光标移到窗口中间一行的开始处。</p>


<p>
    Ctrl+U：重复执行命令，如Ctrl+U 7 Ctrl+B向左移动7个字符。</p>


<p>
    Ctrl+D、DEL键：删除光标所在字符。<br />
    Backspace：删除光标左边字符。</p>


<p>
    Ctrl+X 2：水平拆分窗口；<br />
    Ctrl+X 3：垂直拆分窗口；<br />
    Ctrl+X b：切换到指定的缓冲区。</p>


<p>
    Ctrl+V、PageDown键：向前滚动一屏；<br />
    Alt+V、PageUP键：向后滚动一屏；<br />
    Ctrl+L：重绘屏幕。</p>


<p>
    <span style="color:#6666CC"><strong><span style="font-size:18px">第３章：grep－Global search Regular Expression and Print out the line</span></strong></span></p>


<p>
    grep是一个最初用于UNIX操作系统的命令行工具。在给出文件列表或标准输入后，grep会对匹配一个或多个正则表达式的文本进行搜索，并只输出匹配的文本。语法为：grep [选项] 字符模式 [文件名1，文件名2］。不输入文件名则从标准输入读取内容。</p>


<p>
    grep使用<span style="font-weight:bold">正则表达式元字符基本集</span>，包括：<br />
    ^：匹配行首；<br />
    $：匹配行尾；<br />
    .：匹配任意字符；<br />
    *：匹配0个或多个任意字符；<br />
    []：匹配指定范围内的其中一个字符；<br />
    [^]：匹配不在指定范围内的字符；<br />
    \&lt;：匹配单词首。（在linux终端上敲命令时，需要多使用一个反斜杠，如：grep abcd\\&lt; filename，因为第一个反斜杠用于转义一个shell的反斜杠。）<br />
    \&gt;：匹配单词末。<br />
    \{m\}：匹配前一字符的m次出现。<br />
    \{m,\}：匹配前一字符的至少m次出现。<br />
    \{m,n\}：匹配前一字符至少m次，至多n次出现。</p>


<p>
    grep的选项包括：<br />
    -#：同时显示匹配行上下的＃行，＃表示数字；<br />
    -b：在每行前打印字符偏移量；<br />
    -c：只打印匹配的行数，不显示匹配的内容；<br />
    -f FILE：从FILE文件中提取模式；<br />
    -h：当搜索多个文件时，不显示匹配文件名前缀；<br />
    -i：忽略大小写；<br />
    -q：取消显示，只返回退出状态，0表示找到了匹配的行；<br />
    -l：打印匹配模式的文件清单；<br />
    -L：打印不匹配模式的文件清单；<br />
    -n：在匹配的行前面打印行号；<br />
    -s：不显示关于不存在或无法读取文件的错误信息；<br />
    -v：反检索，只显示不匹配的行；<br />
    -w：如果被\&lt;和\&gt;引用，就把表达式作为一个单词搜索；<br />
    -V：显示软件版本信息。</p>


<p>
    grep的退出状态存储在$?里，通过ehco $?可以查看，搜索成功值为0，搜索不成功值为1，文件不存在则返回2。</p>


<p>
    egrep（extend grep）命令与grep相似，执行效率比grep高，但需要占用较大内存空间。egrep使用正则表达式元字符的扩展集，包括：<br />
    +：匹配一个或多个前一字符；<br />
    ?：匹配一个或0个前一字符；<br />
    a|b|c：匹配a或b或c。<br />
    ()：分组符号；<br />
    x{m}、x{m,}、x{m,n}：作用同x\{m\}、x\{m,\}、x\{m,n\}。</p>


<p>
    grep -E打开对元字符扩展集的支持，实现与egrep相同的功能。</p>


<p>
    fgrep：与grep相似，占用空间比egrep小，速度比grep快，但不识别正则表达式。</p>


<p>
    <span style="color:#6666CC"><strong><span style="font-size:18px">第４章：gawk与sed</span></strong></span></p>


<p>
    <strong><span style="font-size:16px">awk</span></strong>是模式扫描和处理语言，又称过滤器，是Linux/Unix下用来操纵数据和产生报告的程序语言。其处理的数据可以来自标准输入、一个或多个文件、或者其他命令的输出。</p>


<p>
    awk写于1977年，其名称取自其作者姓氏的第一个字母，分别是Alfred V Aho, Peter J. Weinberger和Brian W Kernighan。在1985年的升级版中加入了用户自定义函数、动态正则表达式和处理输入文件等功能，使得awk可以处理大型程序。awk有多个版 本，包括旧版awk、nawk（new awk，新版本）、gawk（GNU版本）以及POSIX awk等。很多Linux系统将/bin/awk链接至/bin/gawk。</p>


<p>
    gawk程序由包含模式和动作的单行或多行文本组成，格式如下：<br />
    pattern {action}<br />
    模式用来从输入中选取文本行，对于匹配的每行文本，gawk都执行fcwt（action）来处理。</p>


<p>
    模式用斜杠包装，如：gawk /word/ filename查找所有包含word的行。这里没有指定action，默认为print。</p>


<p>
    &ldquo;~&rdquo;用于测试一行中某段是否匹配模式。一行中可以有多个&ldquo;段&rdquo;，各&ldquo;段&rdquo;之间由空白符号分隔，如section1 secion2 section3。gwak &#39;$1~/word/&#39; filename在文件中查找第一段匹配word的各行。&ldquo;!~&rdquo;用于测试不匹配，如gawk &#39;$2!~/word/&#39; filename。</p>


<p>
    BEGIN和END是两个独特的模式，分别是在gawk开始处理之前和处理完毕之后要执行的命令。在处理所有输出之前，gawk执行BEGIN模式 关联的动作，在处理完之后执行END模式关联的动作。例：gawk &#39;BEGIN{print &quot;This is the beginning&quot;} {print}&#39; filename。又例： gawk &#39;BEGIN {print &quot;head&quot;; count=0} {print; count++} END {printf &quot;end: %d&quot;, count}&#39; filename。</p>


<p>
    逗号&ldquo;,&rdquo;可以分隔两个模式，作为范围运算符。例：gawk &#39;/abcd/,/efgh/&#39; filename 输出第一行匹配abcd而最后一行匹配efgh的多行。</p>


<p>
    {print}是默认的动作，不带参数时则输出记录（通常是一行）。参数可以是变量或字符串常量。还可以指定输出到文件，如&gt;（覆 盖）、&gt;&gt;（追加）、|（管道）和|&amp;（协进程，双向管道）。例：{print &gt; &quot;somefile&quot;}。多个动作用分号&ldquo;;&rdquo;隔开。</p>


<p>
    &ldquo;#&rdquo;开头的程序行表示注释。</p>


<p>
    gawk不需要声明可以直接使用变量。未赋初始值的变量自动初始化为0或空字符串。除了用户变量（user variable）外，gawk还维护了程序变量（program variable）：<br />
    $0：当前记录（作为单个变量）；<br />
    $1-$n：当前记录的字段；<br />
    FILENAME：当前输入文件名（null表示标准输入）；<br />
    FS：输入字段的分隔符；<br />
    NF：当前记录的字段数目；<br />
    NR：当前记录的记录编号，每处理完一个记录，NR的值就自动加1；<br />
    OFS：输出字段分隔符（默认为空格符）；<br />
    ORS：输出记录分隔符（默认为换行符）；<br />
    RS：输入记录分隔符（默认为换行符）；</p>


<p>
    除了在程序中初始化变量外，还可以在命令行上用&ldquo;--assign&rdquo;或&ldquo;-v&rdquo;选项初始化变量。如：awk -v A=1 &#39;{print A}&#39; filename。</p>


<p>
    gawk把输入文件看作是一个具有一定格式的记录集合，通常一行为一个记录，每个记录被空格分隔成多个字段。-F选项可以指定字段分隔符， 如：awk -F: &#39;{print $2}&#39; filename指定分隔符为冒号&ldquo;:&rdquo;。而awk -F[:-] &lsquo;{print $2}&#39; filename指定分隔符为冒号&ldquo;:&rdquo;或者连字符&ldquo;-&rdquo;，即记录1:2-3被视为1、2、3三个字段。输入段分隔符也可以在模式中指定：awk &#39;BEGIN{FS=&quot;[:-]&quot;} {print $2}&#39; filename。</p>


<p>
    {print $2 $3}会把两个变量合并输出，例如，$2为&quot;a&quot;，$3为&quot;b&quot;，则前述动作输出&ldquo;ab&rdquo;，{print $2,$3}输出&quot;a b&quot;。输出段分隔符可以在BEGIN模式中指定：awk BEGIN{OFS=&quot;:&quot;} {print $2}&#39; filename。</p>


<p>
    gawk支持函数，自带的函数有：<br />
    length(str)：返回str的字符个数。不带参数则返回当前记录的字符个数。<br />
    int(num)：返回num的整数部分。<br />
    index(str1,str2)：str2在str1中的位置，如果不在则返回0。<br />
    split(str,arr,del)：用del作定界符，将str的元素放置到数组arr[1]...arr[n]中，返回数组元素个数。<br />
    sprintf(fmt,args)：根据fmt格式化args并返回格式化后的字符串，模仿C编程语言中相应的同名函数。<br />
    substr(str,pos,len)：返回str中从pos开始长度为len个字符的字符串。<br />
    tolower(str)：返回str的副本，所有大写字母被转换成小写。<br />
    toupper(str)：返回str的副本，所有小写字母被转换成大写。</p>


<p>
    gawk支持关联数组，即array[string]=value。关联数组可以用for来遍历。例：awk &#39;{array[$1]=$2} END{for (elem in array) print elem}&#39; filename。</p>


<p>
    printf用于格式化输出，语法为：%[-][x[.y]]cov。&ldquo;-&rdquo;表示左对齐，&ldquo;x&rdquo;表示最小字段宽度，&ldquo;y&rdquo;表示数字中小数点右边的位数。&ldquo;conv&rdquo;指示数值转换的类型，包括：<br />
    d：十进制；<br />
    e：指数表示；<br />
    f：浮点数字；<br />
    g：使用f或e中较短的那个；<br />
    o：无符号八进制；<br />
    s：字符串；<br />
    x：无符号十六进制。</p>


<p>
    gawk支持关系运算符，包括&lt;、&gt;、&lt;=、&gt;=、==、!=。布尔结果可以用布尔运算符&ldquo;&amp;&amp;&rdquo;和 &ldquo;||&rdquo;来运算。算术运算符支持&ldquo;+&rdquo;、&ldquo;-&rdquo;、&ldquo;*&rdquo;、&ldquo;/&rdquo;、&ldquo;=&rdquo;、&ldquo;%&rdquo;、&ldquo;++&rdquo;、&ldquo;--&rdquo;、&ldquo;+=&rdquo;、&ldquo;-=&rdquo;、&ldquo;*=&rdquo;、&ldquo;/=&rdquo;和 &ldquo;%=&rdquo;。与C基本一样。</p>


<p>
    流程控制有if...else，while，for，break和continue。</p>


<p>
    getline可以用来读取文件中的一行。如awk &#39;BEGIN {getline myline; print myline}&#39; myfile只输出文件的第一行，可以用循环来控制读取的行数。</p>


<p>
    awk程序可以写在一个文件里作为脚本文件，再用-f选项指定。例：awk -f myscript filename。</p>


<p>
    协进程（coprocess）是指与另一个进程并行运行的进程。gawk从版本3.1开始可以通过协进程方式直接与某个后台进程进行信息交换。协进程可用于客户端／服务器环境中（例如构建SQL前端与后端），或者通过网络与远程系统交换数据。例如，下面这个awk脚本：<br />
    BEGIN {<br />
    &nbsp;&nbsp;&nbsp; count = 0;<br />
    &nbsp;&nbsp;&nbsp; while (getline myline) {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print myline |&amp; &quot;./coprocess&quot;;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;./coprocess&quot; |&amp; getline LINE;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print LINE;<br />
    &nbsp;&nbsp;&nbsp; }<br />
    }<br />
    它将与同一目录一下的可执行文件coprocess进行协作。下面是coprocess文件的内容：<br />
    #!/bin/bash<br />
    while read LINE<br />
    do<br />
    &nbsp;&nbsp;&nbsp; echo &quot;tommy&quot; $LINE<br />
    done<br />
    之后运行命令：gawk -f myscript filename，则在filename中的每行前加上&ldquo;tommy&rdquo;再输出到标准输出。</p>


<p>
    在协进程的基础上，gawk还可以通过网络交换数据。gawk可以通过IP网络连接到另一个系统上的某个进程进行信息交换。当用户使用&ldquo;/inet/&rdquo;开头的特殊文件名时，gawk将使用网络连接来处理用户的请求。以&ldquo;inet&rdquo;开头的特殊文件的格式如下：<br />
    /inet/protocol/local-port/remote-host/remote-port<br />
    其中&ldquo;protocol&rdquo;通常是TCP，也可以是UDP。&ldquo;local-port&rdquo;表示本地端口，0表示让gawk自动选择一个端口。&ldquo;remote- host&rdquo;表示远端主机的地址，&ldquo;remote-port&rdquo;表示远端端口号，可以指定为http或ftp地址。比如下面的代码：<br />
    BEGIN {<br />
    &nbsp;&nbsp;&nbsp; server = &quot;/inet/tcp/0/www.google.com/80&quot;;<br />
    &nbsp;&nbsp;&nbsp; print &quot;start to connect..&quot;;<br />
    &nbsp;&nbsp;&nbsp; print &quot;GET /index.html\r\n&quot; |&amp; server;<br />
    &nbsp;&nbsp;&nbsp; print &quot;request sent.&quot;<br />
    &nbsp;&nbsp;&nbsp; while (server |&amp; getline)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print $0;<br />
    &nbsp;&nbsp;&nbsp; print &quot;done.&quot;<br />
    }</p>


<p>
    <strong><span style="font-size:16px">sed</span></strong>（stream editor，流编辑器）是一个批处理（非交互式）编辑器，可以实现在vi和ex里一样的编辑任务。sed相当小巧，可以利用管道对标准输入／输出的数据 进行编辑和组合。sed可以对来自文件或标准输入流进行转换，通常被用作管道中的过滤器。由于sed仅仅对其输入进行一遍扫描，因此比其他交互编辑器（如 ed）更加高效。</p>


<p>
    sed一次处理一行文本并把处理结果输出送往标准输出设备（屏幕）。sed把当前处理的行存储在模式空间（pattern space）的临时缓冲区中。一旦sed完成对模式空间中行的处理（也就是执行完这一行中的sed命令），模式空间中的行就被送往屏幕（除非命令是删除行 或者打印到打印机）。行被处理完成以后，就被移出模式空间，程序接着读入下一行，处理、显示、移出&hellip;&hellip;文件输入的最后一行被处理完成以后，sed结束。通 过在临时缓冲区存储每一行，然后在缓冲区中操作该行，保证了原始文件不会被破坏。</p>


<p>
    sed命令行的语法格式为：<br />
    sed [-n] program [file-list]<br />
    sed [-n] -f program-file [file-list]<br />
    其中&ldquo;program&rdquo;表示命令行中的sed程序，&ldquo;program-file&rdquo;表示一个sed程序文件。&ldquo;file-list&rdquo;表示sed将要处理的普通数据文件。&ldquo;-n&rdquo;选项阻止sed将选定的行复制到标准输出上。</p>


<p>
    sed程序由符合如下语法的一行或多行命令构成：<br />
    [address][, address] instruction [argument-list]</p>


<p>
    其中&ldquo;address&rdquo;是可选的，如果省略则对输入的所有行进行处理。地址可以以行号、正则表达式或二者结合的方式表示。比如sed -n &#39;3,/abcd/ p&#39; filename输出第3行到匹配&ldquo;abcd&rdquo;的那行。其中&ldquo;p&rdquo;是打印指令。&ldquo;$&rdquo;表示最后一行。</p>


<p>
    指令包括：<br />
    d：删除指令（delete）。导致sed不输出被选择的行，并且不继续完成对该行的后续处理过程。<br />
    n：下一条指令（next）。输出当前选择的行（如果可以），然后从输入中读入下一行，并且从program或program-file中的下一条指令开始对新读入的行进行处理。<br />
    a：追加指令（append）。在当前选择的行之后插入一行或多行文本。如果在a指令前有两个地址，那么它将在选定的每一行之后添加文本。如果a指令前没有地址，它将在每行之后添加文本。<br />
    i：插入指令（insert）。与a指令同，只不过是将文本添加到选定的行之前。<br />
    c：修改指令（change）。与a和i指令类似，不同的是它将选定的行修改为新的文本。如果指定的是一个地址范围，c指令将整个范围内的行替换成新文本。<br />
    s：替换指令（subsitute）。与vim中的替换指令类似。语法为s/pattern/replacement/[g][p][w file]。g为global，替换所有匹配；p为print，打印替换过的行；w为写入文件。<br />
    p：打印指令（print）。将选定的行写入标准输出。<br />
    w file：写指令（write）。把选定的行写入文件。<br />
    r file：读指令（read）。从文件中读出内容并添加到选定的行之后。<br />
    q：退出指令（quit）。立即结束sed。</p>


<p>
    sed具有一此控制结构，可以控制程序的流程走向。常用的控制结构有：<br />
    !：取反操作，使得sed后面与其同一行的指令作用于没有该指令选择的每一行地址上。例如，&ldquo;3!d&rdquo;将删除除第3行外的所有行，而&ldquo;$!p&rdquo;将显示除最后一行外的所有行。<br />
    {}：将一组指令括起来，用于定义指令组。该组指令将作用于它前面的地址所选定的行，使用分号可将一行中的多条指令分隔开。<br />
    分支指令：sed不适合使用分支指令，如果需要，建议使用awk或Perl来编写程序。<br />
    :label：标识sed程序中的一个位置，适用于分支指令b或t<br />
    b [label]：无条件转移到label标识的命令。如果没有指出分支目标label，则跳过当前行中剩下的指令并从输入中读取下一行。<br />
    t [label]：如果从输入中读取的行使得s指令匹配成功，则转移到label标识的命令。如果没有指出分支目标label，则跳过当前行中剩下的指令并从输入中读取下一行。</p>


<p>
    sed有两个缓冲区：Pattern区和Hold区。Pattern区中保存着sed从输入中读取的行，所有的命令都工作在Pattern区上。Hold区作为临时缓冲区，可以用来暂存数据。Pattern区和Hold区之间进行数据传送的指令有：<br />
    g：将Hold区中的内容复制到Pattern区中。Pattern区中原来的内容将会丢失。<br />
    G：将一个换行符和Hold区中的内容追加到Pattern区中的内容之后。<br />
    h：将Pattern区中的内容复制到Hold区中。Hold区中原来的内容将会丢失。<br />
    H：将一个换行符和Pattern区的内容附加到Hold区中的内容之后。<br />
    x：交换Pattern区和Hold区中的内容。</p>


<p>
    <span style="color:#6666CC"><strong><span style="font-size:18px">第５章：其它常用的文本编辑命令</span></strong></span></p>


<p>
    <strong>aspell</strong>：检查文件的拼写错误。例：aspell -c file检查文件的拼写错误，并进入交互模式。-c为check，指定文件。aspell -l从标准输入产生一个拼写错误的单词列表。aspell dump master输出使用的检错词典。aspell还有一个兼容的ispell命令，功能及用法与aspell相似，但不包含一些选项。</p>


<p>
    <strong>cat</strong>：显示文本内容。cat是Concatenate的缩写。-b对非空行输出行编号；-E在每行结束处显示$；-n对输出的所有行编号；-S不输出多行空行；-T：将制表符Tab显示为^I；-v显示非打印内容。-A等价于-vET；-e等价于-vE；-t等价于-vT。<br />
    -v选项的英文解释：Non-printing characters (with the exception of tabs, new-lines and form-feeds) are printed visibly.<a href="http://www.computerhope.com/jargon/ja.htm#ascii">ASCII</a> control characters (octal 000 - 037) are printed as ^n, where n is the corresponding ASCII character in the range octal 100 - 137 (@, A, B, C, . . ., X, Y, Z, [, \, ], ^, and _); the DEL character (octal 0177) is printed ^?. Other non-printable characters are printed as M-x, where x is the ASCII character specified by the low order seven bits。</p>


<p>
    <strong>cmp</strong>：比较文件差异。例：cmp file1 file2。-l显示字节序号（十进制）和字节差异（八进制）。-i SKIP：路过起始输入的SKIP个字节。-i SKIP1:SKIP2：跳过文件1的SKIP1字节、文件2的SKIP2字节。-s不显示差异信息，仅返回状态值，0表示文件相同，1表示不 同，&gt;1表示存在错误。-n LIMIT比较至多LIMIT个字节。-b显示差异字节。</p>


<p>
    <strong>csplit</strong>：按指定行数分割文件。例：csplit file 50把前50行分割成一个文件，其余部分成为另一个文件。</p>


<p>
    <strong>cut</strong>：从文件选择指定的内容，并输出到标准输出。cut -c 2 file输出每行第2个字符。-c1-10输出每行第1～第10个字符。-b1输出每行的第一个字节。</p>


<p>
    <strong>col</strong>：过滤控制字符。-b过滤BACKSPACE；-x：将TAB替换为多个空格。</p>


<p>
    <strong>colrm</strong>：删除指定的列。例：colrm 2 5 &lt; file删除第2到第5列。</p>


<p>
    <strong>comm</strong>：对已排序文件逐行进行比较。输出结果由3列组成，第1列表示仅在第1个文件中出现的行，第2列表示仅在第2个文件出现的行，第3列表示在2个文件中都存在的行。sort file &gt; sorted_file用来给文件排序。</p>


<p>
    <strong>diff</strong>：比较文本文件。例：diff file1 file2。-y输出时使用对比格式，即输出两列；-b忽略空格；-B忽略空白行；-i忽略大小写。-u：输出统一文件的行数；-r：当两个都是目录时， 递归比较子目录。-N：在比较目录时，如果一个文件只出现在第一个目录中，则认为它在另一个目录中了以下也出现，且为空。diff -ruN file1 file2 &gt; file.diff生成差异文件，之后可用patch命令进行打补丁：patch -p1 &lt;file.diff。</p>


<p>
    <strong>diffstat</strong>：读取diff命令的输出，显示统计信息。例：diff file1 file2 | diffstat。</p>


<p>
    <strong>ed</strong>：行文本编辑器。</p>


<p>
    <strong>fmt</strong>：编排文本文件。重排指定文件的每一个段落，并输出到标准输出设备。例：fmt file。</p>


<p>
    <strong>gedit</strong>：gnome的文本编辑器。</p>


<p>
    <strong>head</strong>：从开始显示指定行。例：head -5 file。</p>


<p>
    <strong>indent</strong>：调整C原始代码文件格式。</p>


<p>
    <strong>jed</strong>：编辑文本文件。</p>


<p>
    <strong>joe</strong>：编辑文本文件。功能强大的ASCII文本编辑器，操作比较复杂，但功能很强大。可以模拟多种工作环境。如WordStar、Emacs、Pico和简约版joe。</p>


<p>
    <strong>join</strong>：基于相同字段连接两个文件。例如，文本a的内容为：<br />
    1 aa<br />
    2 bb<br />
    3 cc<br />
    文件b的内容为：<br />
    1 oo<br />
    2 pp<br />
    4 qq<br />
    则join a b的结果为：<br />
    1 aa oo<br />
    2 bb pp。<br />
    而join b a的结果为：<br />
    1 oo aa<br />
    2 pp bb</p>


<p>
    <strong>less</strong>：前后翻阅文本内容。-m显示百分比；-M显示百分比、行号及总行数；-N在每行前输出行号；-S合并 连续空白行；-i搜索时忽略大小写，搜索串中包含大写字母除外；-I搜索时忽略大小写，搜索串中包含小写字母除外。打开less后进入类似于vi末行模式 的界面。可使用命令：<br />
    回车键：向下移动一行<br />
    y：向上移动一行<br />
    空格：向下滚动一屏<br />
    b：向上滚动一屏<br />
    d：向下滚动半屏<br />
    u：向上滚动半屏<br />
    h：less的帮助<br />
    g：跳到第1行<br />
    G：跳到最后1行<br />
    数字%：跳到百分比处；<br />
    数字w：向上滚动数行；<br />
    数字回车：向下滚动数行；<br />
    /pattern：查找<br />
    n：继续查找。<br />
    q：退出<br />
    v：调用vi编辑器。<br />
    !command：调用shell命令。</p>


<p>
    <strong>more</strong>：分屏显示文本内容。+n从第n行开始显示；-n定义屏幕大小为n行；+/pattern从pattern前两行开始显示；-c从顶部清屏，然后显示；-s合并多个空白行；-u去除文件内容里的下划线。more启动后进入交互界面，可使用命令：<br />
    Enter：向下n行，需要定义，默认为1行；<br />
    Ctrl+F：向下滚动一屏；<br />
    空格键：向上滚动一屏；<br />
    Ctrl+B：返回上一屏；<br />
    ＝：输出当前的行号；<br />
    :f：输出文件名和当前行的行号；<br />
    V：调用vi编辑器；<br />
    !command：调用shell命令；<br />
    q：退出。</p>


<p>
    <strong>od</strong>：输出文件内容。以八进制或其他格式显示。od file以八进制显示；od -t c file以字符方式显示；-t a以ASCII码的形式显示；-t d以十进制方式显示；-t f以浮点数形式显示；-x以十六进制形式显示。</p>


<p>
    <strong>pr</strong>：编排文件格式。pt file为文件加上一个表头。pt -3 file分三栏显示文件。</p>


<p>
    <strong>patch</strong>：修补文件。例：diff a b &gt; ab.diff。patch a &lt; ab.diff可以使a的内容与b一致。</p>


<p>
    <strong>pico</strong>：编辑文字文件。</p>


<p>
    <strong>sort</strong>：文件排序。-d按字典序排序；-g按数字排序；-c检查是否已排过序；-f把小写字母看作大写字母；-n按照数值排序；-r逆序排列；-o将结果输出到文件；-t指定分隔符；+指定排序的起始比较位置。</p>


<p>
    <strong>spell</strong>：简单的拼写检查程序。</p>


<p>
    <strong>tail</strong>：显示文件的末尾部分。例：tail -2 file显示文件最后2行。tail +11 file从文件第11行开始显示直到文件结束。</p>


<p>
    <strong>tac</strong>：反序输出文件。cat的反序排列。从最后一行输出到第一行。</p>


<p>
    <strong>tee</strong>：读取标准输入到标准输出或文件。</p>


<p>
    <strong>tr</strong>：转换文件中的字符。把从标准输入读入的字符串转换为指定的字符串，然后输出到标准输出设备。如：cat abc.doc | tr a-z A-Z把文件中的小写字母转换成大写字母。</p>


<p>
    <strong>uniq</strong>：检查文件中重复出现的行。-c：每一行前，显示重复次数；-d：显示重复的行；-i：忽略大小写；-u：仅输出不重复的行。例：uniq file。</p>


<p>
    <strong>view</strong>：查看文件内容。只读方式的vi。</p>


<p>
    <strong>wc</strong>：计算文件的字数、字节数、行数。-c：显示字节数；-m：显示字符数；-l：显示新行数；-L：显示最长行的长度；-w：显示单词数。</p>


<p>
    转自csdn，原文<a href="http://blog.csdn.net/yourtommy/article/details/7236771#comments">链接</a></p>

]]></content>
  </entry>
  
</feed>
