<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | TechToy]]></title>
  <link href="http://ensonmj.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://ensonmj.github.com/"/>
  <updated>2012-06-13T21:58:38+08:00</updated>
  <id>http://ensonmj.github.com/</id>
  <author>
    <name><![CDATA[ensonmj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C# 非UI线程通知关闭UI时的异常处理]]></title>
    <link href="http://ensonmj.github.com/blog/2012/05/25/c-number-fei-uixian-cheng-tong-zhi-guan-bi-uishi-de-yi-chang-chu-li/"/>
    <updated>2012-05-25T19:59:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/05/25/c-number-fei-uixian-cheng-tong-zhi-guan-bi-uishi-de-yi-chang-chu-li</id>
    <content type="html"><![CDATA[<p>C#中非UI线程正常情况下无法操作UI控件，一般使用委托的方式访问这些控件。<br/>
示例代码：</p>

<pre><code>private void DelegateHandler()
{
    if (this.InvokeRequired)
    {
        this.Invoke(new MethodInvoker(
            delegate()
            {
                this.DoSomething();
            }));
    }
    else
    {
        this.DoSomething();
    }
}
</code></pre>

<!--more-->


<p>按照此模式，外部通知关闭UI的委托处理逻辑就应该如下：</p>

<pre><code>private void CloseFormDelegateHandler()
{
    if (this.InvokeRequired)
    {
        this.Invoke(new MethodInvoker(
            delegate()
            {
                this.Close();
            }));
    }
    else
    {
        this.Close();
    }
}
</code></pre>

<p>但此段代码有可能会造成程序崩溃，这是一个MS的bug，详情请查看此<a href="https://connect.microsoft.com/VisualStudio/feedback/details/560637/exception-invoke-or-begininvoke-cannot-be-called-on-a-control-until-the-window-handle-has-been-created-is-thrown">链接</a>，MS的建议是 <code>catch and swallow the ObjectDisposedException when you calls Control.Invoke() to dispose a control from another thread.</code> 这个建议其实也是有问题的，事实上抛出来的异常是<code>InvalidOperationException</code>，所以应该捕获并吞掉此异常。完整的代码如下：</p>

<pre><code>    private void CloseFormDelegateHandler()
    {
        if (this.InvokeRequired)
        {
            try
            {
                this.Invoke(new MethodInvoker(
                    delegate()
                    {
                        this.Close();
                    }));
            }
            catch (ObjectDisposedException ex)
            {
                Trace.TraceInformation("微软的建议:{0}",ex.Message);
            }
            catch (InvalidOperationException ex)
            {
                Trace.TraceInformation("莫惊慌，微软的bug:{0}",ex.Message);
            }
        }
        else
        {
            this.Close();
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[彻底解决WebRequest的GetResponse阻塞问题]]></title>
    <link href="http://ensonmj.github.com/blog/2012/02/16/webrequest_getresponse_block/"/>
    <updated>2012-02-16T20:00:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/02/16/webrequest_getresponse_block</id>
    <content type="html"><![CDATA[<p>第一版
<div><script src='https://gist.github.com/1844714.js?file=WebResponse_block_first.cs'></script>
<noscript><pre><code>//第一版，没有释放基础流
WebRequest wr = WebRequest.Create(URL);
try
{
  WebResponse res = wr.GetResponse();
  /*
   * do something
  */
}
catch(WebException ex)
{
  throw ex;
}

</code></pre></noscript></div>
</p>

<!--more-->


<p>第二版
<div><script src='https://gist.github.com/1844755.js?file=WebResponse_block_second.cs'></script>
<noscript><pre><code>//第二版，只释放了response
WebRequest wr = WebRequest.Create(URL);
try
{
  WebResponse res = wr.GetResponse();
  /*
   * do something
  */
  res.Close();
}
catch(WebException ex)
{
  res.Close();
  throw ex;
}</code></pre></noscript></div>
</p>

<p>第三版
<div><script src='https://gist.github.com/1844761.js?file=WebResponse_block_third.cs'></script>
<noscript><pre><code>//正确释放request和response
WebRequest wr = WebRequest.Create(URL);
try
{
  WebResponse res = wr.GetResponse();
  /*
   * do something
  */
  res.Close();
  wr.Abort();
}
catch(WebException ex)
{
  res.Close();
  wr.Abort();
  throw ex;
}
</code></pre></noscript></div>
</p>

<p>第四版
<div><script src='https://gist.github.com/1844774.js?file=WebResponse_block_fourth.cs'></script>
<noscript><pre><code>//代理走不通的情况下，会导致导致阻塞
WebRequest wr = WebRequest.Create(URL);
//Proxy may block the http request
wr.Proxy = null;
try
{
  WebResponse res = wr.GetResponse();
  /*
   * do something
  */
  res.Close();
  wr.Abort();
}
catch(WebException ex)
{
  res.Close();
  wr.Abort();
  throw ex;
}</code></pre></noscript></div>
</p>

<p>第五版
<div><script src='https://gist.github.com/1844796.js?file=WebResponse_block_fifth.cs'></script>
<noscript><pre><code>//多线程并发时，默认最多只能建立两个持久连接，后续请求也会阻塞，
//增大默认连接数限制可解决此问题

//C#默认只允许两个持久连接，http协议的RFC文档也有此建议
System.Net.ServicePointManager.DefaultConnectionLimit = 256;

WebRequest wr = WebRequest.Create(URL);
try
{
  WebResponse res = wr.GetResponse();
  /*
   * do something
  */
  res.Close();
  wr.Abort();
}
catch(WebException ex)
{
  res.Close();
  wr.Abort();
  throw ex;
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程断点续传之下载]]></title>
    <link href="http://ensonmj.github.com/blog/2012/01/14/http_multithreads_download/"/>
    <updated>2012-01-14T20:00:00+08:00</updated>
    <id>http://ensonmj.github.com/blog/2012/01/14/http_multithreads_download</id>
    <content type="html"><![CDATA[<p>年底了，本该是个收官的时节，却因一个新项目搞得忙碌不堪，博客也一直无心顾及。这会儿忙里偷闲，正好整理整理最近的学习心得，也算做个年终总结吧。</p>

<p>大概一个月前，偶然看到一篇博文，博主面试一位新员工，问断点续传该怎么实现。很不幸，那个被面试的哥们没答出来。我当时就在想，我要碰到这个估计也挂了，于是有心想了解一下这方面的知识。
我一向推崇不知道就搜索，关于断点续传，网上有很多资料，其中有一篇<a href="http://www.wuzesheng.com/?p=1509">博文</a>总结的很不错，摘抄如下：</p>

<!--more-->


<p></p>

<h3>多线程下载</h3>

<p>多线程下载的基本思想就是把要下载的文件按下载线程的个数N，划分为N块，每个线程负责下载一块。具体如何下载文件的块，不同的协议有点差别：</p>

<ol>
<li>Http多线程下载<br/>
Http协议支持Range关键字，可以用Range来指定要下载的范围，如下所示（假设要下载的文件总大小为1500bytes，用三个线程下，每个线程下载500bytes)</li>
</ol>


<p>首500字节（字节位移0-499）</p>

<pre><code>    Range: bytes=0-499
</code></pre>

<p>次500字节（字节位移500-999）</p>

<pre><code>    Range: bytes=500-999
</code></pre>

<p>后500字节（字节位移1000-1499）</p>

<pre><code>    Range: bytes=1000-1499，或者Range: bytes=1000-
</code></pre>

<p>需要注意，Http请求头中加了Range字段后，请求成功的状态码206(部分内容)，不再是200。</p>

<ol>
<li>Ftp多线程下载<br/>
Ftp协议支持REST和RETR指令，可以用这两个指令来指定要下载起始位置，如下所示（假设要下载的文件总大小为1500bytes，用三个线程下，每个线程下载500bytes, 文件名为file)</li>
</ol>


<p>首500字节: 首先用REST 0设置从第0个字节开始下载，然后用 RETR file指定要下载的文件，启动数据接收，开始下载。<br/>
次500字节和最后500字节的做法和上面一样，唯一的区别在于REST指定的起始位置不一样，次500字节为REST 500，最后500字节为REST 1000。</p>

<p>需要注意，Ftp不能像Http那样，指定要下载的范围，只能指定要下载的起位置。因此，应用需要自己把握下载了多少个字节，比如说，要下载中间500个字节，用REST设置完起始位置，开始下载后，如果应用判断到接收的数据已大于等于500个字节，就需要停止下载。</p>

<h3>断点续传</h3>

<p>断点续传的基本思想就是记住上次连接断开时已经下载的字节数N，然后本次下载的时候，从第N+1个字节开始下载，如果读者朋友对第一部分中讲的多线程下载已经理解的话，那么如果进行断点续传便是水到渠成的事情，下面我只做简单的说明，假设已经下载的字节为N:</p>

<pre><code>Http: Range: bytes=N- （注意字节位移是从0开始的，因此第N+1个字节的位移是N）
Ftp: a. REST N, b.RETR file
</code></pre>

<p>这段文字先介绍了多线程下载的原理，然后是断点续传。在我看来，这两个原理是一样的。博文中除了提到了Http协议外，还讲了Ftp协议多线程断点续传。对于Ftp协议我了解不多，不作多谈。这段时间正好有个机会需要实现Http的多线程断点续传，说说我实现过程中的一些心得体会吧。</p>

<p>能否断点续传，不是只要客户端说支持就可以的，还要服务器支持。在你请求下载文件时，服务器回应的报文中，如果Http header包含<code>Accept-Ranges: bytes</code>，就说明服务器支持按偏移下载文件，也就支持多线程断点续传了，当然多线程、断点续传都需要在客户端来实现。</p>

<p>另外，<code>Accept-Ranges: bytes</code>中的bytes说明偏移的单位是bytes，不是KiloBytes，更不是MegaBytes。那么客户端怎么指点偏移呢？很简单，只要在下载请求报文的header中包含Range字段，具体格式：</p>

<pre><code>Range: bytes=xxxx- 
</code></pre>

<p>这儿只指定了起始偏移，并未指定结束偏移，我用WireShark抓旋风的下载请求时，它就是使用这样的格式。不过，同事说，迅雷也指定了结束偏移，哪种用法更好，暂时我还没有结论。不过，我在实现过程中发现，如果一个完整的文件，分割成多块之后，每块只指定起始偏移，没有结束偏移，其效果跟指定结束偏移一样。还拿上面的1500bytes的文件来举例，三个线程下载，每个线程的请求报文的Range格式如下：</p>

<pre><code>Range: bytes=0-
Range: bytes=500-
Range: bytes=1000-
</code></pre>

<p>使用此下载请求，最后每一个请求的回复都只读取到了500bytes的内容，跟我最开始认为的1500,1000,500不一样，我不知道这是后台服务器比较智能，将整个文件的下载统筹规划了一下，还是说Http协议本身就是这样规定的。不过，我猜测应该是前一种，虽然没有详细看过Http协议，但我觉得协议不太可能有这个规定。另外，我测试的后台服务器是Nginx，其他服务器是不是也这样，暂时未知。</p>

<p>其实到此为止，我只说了续传的一半，续传中的另一半--上传还没有涉及，后面有空会再说说上传。</p>

<p>PS:纠正一下关于Range的错误，如果只指定起始便宜，不指定终结偏移，则应该是默认从起始偏移到文件结尾。</p>
]]></content>
  </entry>
  
</feed>
